* thorp

Synchronisation of files with S3 using the hash of the file contents.

[[https://www.codacy.com/app/kemitix/thorp][file:https://img.shields.io/codacy/grade/14ea6ad0825249c994a27a82d3485180.svg?style=for-the-badge]]

Originally based on Alex Kudlick's [[https://github.com/akud/aws-s3-sync-by-hash][aws-s3-sync-by-hash]].

The normal ~aws s3 sync ...~ command only uses the time stamp of files
to decide what files need to be copied. This utility looks at the md5
hash of the file contents.

* Usage

  #+begin_example
    thorp
    Usage: thorp [options]

      -s, --source <value>  Source directory to sync to S3
      -b, --bucket <value>  S3 bucket name
      -p, --prefix <value>  Prefix within the S3 Bucket
      -l, --last-modified   Ignore local files where last modified matches
      -i, --include <value> Include matching paths
      -x, --exclude <value> Exclude matching paths
      -d, --debug           Enable debug logging
  #+end_example

The ~--include~ and ~--exclude~ parameters can be used more than once.

** ~l~, ~-last-modified~

Where the last modified time stamp for a local file matches the remote
key, the files will be treated as the same. An MD5 hash for the local
file will not be created, which could be expensive if the source
directory is across a network and the files are large.

For files on a local disk this flag shouldn't be needed.

* Behaviour

When considering a local file, the following table governs what should happen:

|---+------------+------------+------------------+--------------------+---------------------|
| # | local file | remote key | hash of same key | hash of other keys | action              |
|---+------------+------------+------------------+--------------------+---------------------|
| 1 | exists     | exists     | matches          | -                  | do nothing          |
| 2 | exists     | is missing | -                | matches            | copy from other key |
| 3 | exists     | is missing | -                | no matches         | upload              |
| 4 | exists     | exists     | no match         | matches            | copy from other key |
| 5 | exists     | exists     | no match         | no matches         | upload              |
| 6 | is missing | exists     | -                | -                  | delete              |
|---+------------+------------+------------------+--------------------+---------------------|

* Executable JAR

To build as an executable jar, perform `sbt assembly`

This will create the file
`cli/target/scala-2.12/thorp-assembly-$VERSION.jar` (where $VERSION
is substituted)

Copy and rename this file as `thorp.jar` into the same directory as
the `bin/throp` shell script.
